=== ভার্সন কন্ট্রোল সম্পর্কে

(((ভার্সন কন্ট্রোল)))
"ভার্সন কন্ট্রোল" কি, এবং কেন প্রয়োজন?
ভার্সন কন্ট্রোল হল এমন একটি সিস্টেম যা কিছু ফাইলের পরিবর্তনগুলো রেকর্ড করে রাখে যাতে করে আপনি কোন একটি নির্দিষ্ট ভার্সন পুণরায় স্মরণ করতে পারেন।
এই বইয়ের উদাহরনগুলোর জন্য  আপনি সফটওয়ার সোর্স কোড এর ফাইল গুলোকে ভার্সন কন্ট্রোল এর জন্য ব্যাবহার করবেন , যদিও মূলত যেকোন ধরণের ফাইলের জন্য ভার্সন কন্ট্রোল ব্যাবহার করা যেতে পারে।

যদি আপনি গ্রাফিক বা ওয়েব ডিজাইনার হয়ে থাকেন এবং আপনি আপনার সকল ছবি কিং লে-আউটের ভার্সন সংরক্ষণ করতে চান (যেতা আপনি নিশ্চয়ি চাইবেন), একটি ভার্সন কন্ট্রোল সিস্টেম ই হবে এর জন্য সবচাইতে উপযুক্ত।
এটি ব্যাবহারের মাধ্যমে যেকোন ফাইলকে তার পুরনো অবস্থায় ফিরিয়ে নিয়ে যাওয়া যেতে পারে। এটা ব্যাবহারের মাধ্যমে ফাইলকে পুরনো অবস্থায় ফিরিয়ে নেওয়া যায়, এমনকি একটি পুরো প্রজেক্টকে পুরনো অবস্থায় ফিরিয়ে নেওয়া যায়, সময়ের সাথে পরিবর্তনগুলোর তুলনা করা যায়, কারও কোন পরিবর্তনের কারণে কোন সমস্যা হচ্ছে কিনা তা  দেখা যায়, কে কখন কোন সমস্যা তৈরী করল তা দেখা থেকে শুরু করে অনেক কিছুই করা যায়।
যদি কখনো কোনকিছু ভজঘট করে ফেলেন বা ফাইল হারিয়ে ফেলেন তবে ভার্সন কন্ট্রোল সিস্টেম (VCS) ব্যাবহার করার মাধ্যমে তা সহজেই  পুনরুদ্ধার করতে পারবেন।
উপরন্তু, এই সবকিছুই আপনি পাচ্ছেন অত্যন্ত স্বল্প ওভারহেড এ।

==== লোকাল ভার্সন কন্ট্রোল সিস্টেম

(((ভার্সন কন্ট্রোল,লোকাল)))
অনেক লোকই অন্য একটি ফোল্ডারে (বুদ্ধিমান হয়ে থাকলে টাইমস্ট্যাম্প দেওয়া একটি ফোল্ডারে) জিনিসপত্র কপি করার মাধ্যমে ভার্সন কন্ট্রোল করে থাকেন।
এই পদ্ধতিটা বেশ কমন কারণ এটা খুব সহজ, কিন্তু এটা অত্যন্ত ত্রূটিপ্রবণ ও বটে।
আপনি কোন ফোল্ডারে আছেন তা ভুলে যাওয়া খুব সহজ এবং ভুল করে ভুল যায়গায় ফাইল কপি করে ফেলা  অস্বাভাবিক নয়।

এই ব্যাপারটা মোকাবেলা করতে প্রোগ্রামার রা অনেক আগেই লোকাল ভার্সন কন্ট্রোল সিস্টেম তৈরী করেছেন যেখানে একটা ডাটাবেস এ সব ফাইলের পরিবর্তনের  ফিরিস্তি রাখা হত।

.Local version control.
image::images/local.png[লোকাল ভার্সন কন্ট্রোল এর ডায়াগ্রাম]

আগের দিনে অন্যতম জনপ্রিয় একটি ভার্সন কন্ট্রোল টুল ছিল RCS নামের একটি সিস্টেম, যেটা অনেক কম্পিউটারের সাথে আজও ডিস্ট্রিবিউট করা হয়।
এমনকি জনপ্রিয় ম্যাকিন্টোশ অপারেটিং সিস্টেমও ডেভেলপার টুল ইন্সটল করলে তখন একটি  `rcs` কমান্ড অন্তর্ভূক্ত করে  থাকে।
RCS ডিস্কে একটি বিশেষ ফরম্যাট এ প্যাচ সেট (অর্থাৎ, ফাইলসমূহের পার্থক্য)  রাখার মাধ্যমে কাজ করে;  এর মাধ্যমে এটি সব প্যাচ যোগ করার মাধ্যমে কোন ফাইল যেকোন সময়ে দেখতে কেমন ছিল তা পুণরায় তৈরী করতে পারে। 

==== কেন্দ্রীভূত (Centralized) ভার্সন কন্ট্রোল সিস্টেম

(((ভার্সন কন্ট্রোল,কেন্দ্রীভূত)))
এর পরে যে ব্যাপারটা নিয়ে ডেভেলপারদের সমস্যা দেখা দিল তা হল অন্যান্য ডেভেলপারদের সাথে একসাথে কাজ করার প্রয়োজনীয়তা।
এই সমস্যা থেকে মুক্তি পাওয়ার জন্য কেন্দ্রীভূত (Centralized) ভার্সন কন্ট্রোল সিস্টেম (CVCSs) তৈরী হল।
এই সিস্টেমগুলো, যেমন CVS, Subversion, এবং Perforce, এদের একটা সিঙ্গেল সার্ভার থাকে যেখানে সব ভার্সন করা ফাইলগুলো রাখা থাকে , এবং কিছু সংখ্যক ক্লায়েন্ট থাকে যারা সার্ভার থেকে ফাইল চেকআউট করে নামিয়ে নিতে পারে। (((CVS)))(((Subversion)))(((Perforce)))
অনেক বছর ধরে এটাই ছিল ভার্সন কন্ট্রোল এর একরকম স্ট্যান্ডার্ড।

.Centralized version control.
image::images/centralized.png[কেন্দ্রীভূত (Centralized) ভার্সন কন্ট্রোল সিস্টেম এর ডায়াগ্রাম]

এই সেটআপ টা অনেক  সুবিধা দেয়, বিশেষ করে লোকাল ভার্সন কন্ট্রোল সিস্টেম এর তুলনায় ।
উদাহরণস্বরুপ, সবাই ই একটা নির্দিষ্ট মাত্রায় জানতে পারে বাকিরা একটা প্রজেক্টে কি করছে।
কে কতটুকু কি করতে পারবে তার উপর অ্যাডমিনিস্ট্রেটরদের ভাল নিয়ন্ত্রণ থাকে; এবং প্রতিটা ক্লায়েন্টের লোকাল ডাটাবেস চেক করার চাইতে এরকম সেন্ট্রালাইজড সিস্টেম নিয়ন্ত্রণ করা অনেক সহজ অ্যাডমিনিস্ট্রেটর এর জন্য।

কিন্তু এই  সেটআপ এরও অনেক গুরুতর সমস্যা আছে।
সবচেয়ে সুস্পষ্ট যেটা সেটা হল সেন্ট্রালাইজড সার্ভার এর সিঙ্গেল পয়েন্ট অফ ফেইলুওর এর সমস্যা।
অর্থাৎ সার্ভার যদি এক ঘন্টার জন্য ডাউন হয়ে যায় কোন কারণে, তাহলে ওই সময়ে কেউই কোলাবরেট করতে পারবেনা কিংবা তারা যে কাজ করছিল তার কোন ভার্সন সেভ করতে পারবে না।
যদি সার্ভারের যে হার্ডিস্ক এ ডাটাবেস রাখা সেটা করাপ্টেড হয়ে যায়, এবং ভালমত ব্যাকআপ না রাখা হয়ে থাকে, তাহলে আপনি সবই হারাচ্ছেন – লোকজনের লোকাল মেশিনে প্রজেক্টের যে স্ন্যাপশটটি আছে সেটি ছাড়া মোটামুটি পুরো প্রজেক্টের সম্পূর্ণ হিস্টরি গায়েব হয়ে যাবে।
লোকাল VCS সিস্টেমগুলোরও এই একই সমস্যা  – যখনই আপনার একটা প্রজেক্টের সব হিস্টরি একটা সিঙ্গেল যায়গায় থাকবে , আপনি সবকিছু হারানোর ঝুঁকিতে থাকবেন।

==== ডিস্ট্রিবিউটেড ভার্সন কন্ট্রোল সিস্টেম

(((ভার্সন কন্ট্রোল,ডিস্ট্রিবিউটেড)))
এই যায়গায় হল  ডিস্ট্রিবিউটেড ভার্সন কন্ট্রোল সিস্টেম (DVCSs) আগমণ।
একটা ডিস্ট্রিবিউটেড ভার্সন কন্ট্রোল সিস্টেম (DVCS) এ (যেমন Git, Mercurial, Bazaar কিংবা Darcs), ক্লায়েন্ট শুধু ফাইলের সর্বশেষ স্ন্যাপশট ই নেয় না বরং তারা পুরো রিপজিটরির একটা মিরর তৈরী করে।
কোন সার্ভার যদি ডাউন হয়ে যায় তাহলে যেকোন একটা ক্লায়েন্ট রিপজিটরি সার্ভারে কপি করে সার্ভার পুর্বের অবস্থানে ফিরিয়ে নিয়ে যাওয়া সম্ভব।
প্রতিটা ক্লোন ই হল মূল ডাটার একটা সম্পুর্ণ ব্যাকআপ। 

.Distributed version control.
image::images/distributed.png[ডিস্ট্রিবিউটেড ভার্সন কন্ট্রোল ডায়াগ্রাম]

এছাড়াও, এই ধরণের সিস্টেমগুলো সাধারণত সহজে একাধিক রিমোট রিপজিটরির সাথে ডিল করতে পারে  , যার ফলে আপনি সহজেই  বিভিন্নভাবে বিভিন্ন মানুষের সাথে একই সময়ে একই প্রজেক্টের ভিন্ন ভিন্ন অংশে কাজ করতে পারবেন। 
এটা বিভিন্ন ধরণের কার্যপ্রবাহের দিক উন্মোচন করে   যেটা সেন্ট্রালাইজড সিস্টেমে সম্ভব না, যেমন hierarchical models.
